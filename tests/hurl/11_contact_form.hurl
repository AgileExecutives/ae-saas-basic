# Contact Form and Newsletter Tests
# Test the public contact form and newsletter management functionality
# This includes comprehensive testing of contact form submission, newsletter subscription,
# and newsletter management with proper authentication

# Test 1: Basic contact form submission (no auth required, no newsletter)
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "Test User",
  "email": "test@example.com",
  "subject": "Test Contact Form",
  "message": "This is a test message from the contact form.",
  "newsletter": false,
  "source": "website",
  "timestamp": "2025-10-12T10:00:00Z"
}

HTTP 200
[Asserts]
jsonpath "$.message" == "Contact form submitted successfully"

# Test 2: Contact form with newsletter subscription enabled
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "Newsletter Subscriber",
  "email": "newsletter@example.com", 
  "subject": "Interest in Services",
  "message": "I'm interested in your services and would like to subscribe to the newsletter.",
  "newsletter": true,
  "source": "website", 
  "timestamp": "2025-10-12T10:05:00Z"
}

HTTP 200
[Asserts]
jsonpath "$.message" == "Contact form submitted successfully"
# Note: Newsletter functionality may show partial success in response

# Test 3: Contact form with different newsletter subscriber
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "Another Newsletter User",
  "email": "newsletter2@example.com",
  "subject": "Newsletter Signup", 
  "message": "Please add me to your newsletter.",
  "newsletter": true,
  "source": "website",
  "timestamp": "2025-10-12T10:10:00Z"
}

HTTP 200
[Asserts]
jsonpath "$.message" == "Contact form submitted successfully"

# Test contact form with missing required fields
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "Incomplete User",
  "email": "incomplete@example.com"
}

HTTP 400
[Asserts]
jsonpath "$.error" exists

# Test contact form with invalid email
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "Invalid Email User",
  "email": "not-an-email",
  "subject": "Test",
  "message": "Test message",
  "source": "website"
}

HTTP 400
[Asserts]
jsonpath "$.error" exists

# Test 6: Contact form with empty required fields (edge case)
POST {{host}}/api/v1/contact/form
Content-Type: application/json
{
  "name": "",
  "email": "",
  "subject": "",
  "message": ""
}

HTTP 400
[Asserts]
jsonpath "$.error" exists

# Setup auth for newsletter management tests
# Try to register a test user (may fail if user already exists)
POST {{host}}/api/v1/auth/register
Content-Type: application/json
{
  "username": "newsletter_test_user",
  "email": "newsletter_test@example.com",
  "password": "TestPass123!",
  "first_name": "Newsletter",
  "last_name": "Tester",
  "organization_id": 1
}

# Accept either 201 (created) or 409 (already exists)
HTTP *
[Asserts]
header "Content-Type" contains "application/json"

# Login with the test user (should work whether user was just created or already existed)
POST {{host}}/api/v1/auth/login
Content-Type: application/json
{
  "username": "newsletter_test_user",
  "password": "TestPass123!"
}

HTTP 200
[Captures]
auth_token: jsonpath "$.data.token"

# Newsletter Management Tests (require authentication)

# Test 7: Getting newsletter subscriptions (requires auth)
GET {{host}}/api/v1/contact/newsletter
Authorization: Bearer {{auth_token}}

HTTP 200
[Asserts]
jsonpath "$" isCollection

# Test 8: Verify newsletter subscriptions are accessible without auth failure
GET {{host}}/api/v1/contact/newsletter

HTTP 401
[Asserts]
jsonpath "$.message" contains "Authorization required"

# Test 9: Newsletter unsubscribe with valid email
DELETE {{host}}/api/v1/contact/newsletter/unsubscribe?email=newsletter@example.com
Authorization: Bearer {{auth_token}}

HTTP 200
[Asserts]
jsonpath "$.message" contains "unsubscribed"

# Test 10: Newsletter unsubscribe with another valid email
DELETE {{host}}/api/v1/contact/newsletter/unsubscribe?email=newsletter2@example.com
Authorization: Bearer {{auth_token}}

HTTP 200
[Asserts]
jsonpath "$.message" contains "unsubscribed"

# Test 11: Unsubscribing non-existent email (error handling)
DELETE {{host}}/api/v1/contact/newsletter/unsubscribe?email=nonexistent@example.com
Authorization: Bearer {{auth_token}}

HTTP 404
[Asserts]
jsonpath "$.error" contains "not found"

# Test 12: Unsubscribe without email parameter (validation error)
DELETE {{host}}/api/v1/contact/newsletter/unsubscribe
Authorization: Bearer {{auth_token}}

HTTP 400
[Asserts]
jsonpath "$.error" contains "Email parameter is required"

# Test 13: Unsubscribe without authentication (security test)
DELETE {{host}}/api/v1/contact/newsletter/unsubscribe?email=test@example.com

HTTP 401
[Asserts]
jsonpath "$.message" contains "Authorization required"