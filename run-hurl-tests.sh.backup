#!/bin/bash

# HURL Test Runner Script
# Runs all HURL tests for AE SaaS Basic

set -e

# Configuration
# Try to read host from hurl.config first, then environment, then default
if [ -f "tests/hurl/hurl.config" ]; then
    HOST=$(grep "^host" tests/hurl/hurl.config | cut -d' ' -f3 2>/dev/null || echo "")
fi
HOST=${HOST:-${TEST_HOST:-"http://localhost:8383"}}
HURL_DIR="tests/hurl"
RESULTS_DIR="test_results"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create results directory
mkdir -p $RESULTS_DIR

echo -e "${BLUE}🚀 Starting AE SaaS Basic HURL Tests${NC}"
echo -e "${BLUE}Host: ${HOST}${NC}"
echo -e "${BLUE}Results Directory: ${RESULTS_DIR}${NC}"
echo ""

# Check if server is running
echo -e "${YELLOW}🔍 Checking server availability...${NC}"
if ! curl -s -f "${HOST}/api/v1/health" > /dev/null; then
    echo -e "${RED}❌ Server is not running at ${HOST}${NC}"
    echo -e "${YELLOW}💡 Start the server with: make run${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Server is running${NC}"
echo ""

# Test files in order
TEST_FILES=(
    "00_quick_integration.hurl"
    "01_health.hurl"
    "02_auth.hurl"
    "03_plans.hurl"
    "04_customers.hurl"
    "05_contacts.hurl"
    "06_emails.hurl"
    "07_user_settings.hurl"
    "08_pdf_generation.hurl"
    "09_static_assets.hurl"
    "10_fuzzy_search.hurl"
)

# Track results
PASSED=0
FAILED=0
TOTAL=${#TEST_FILES[@]}

# Run each test file
for test_file in "${TEST_FILES[@]}"; do
    test_path="${HURL_DIR}/${test_file}"
    result_file="${RESULTS_DIR}/${test_file%.hurl}.json"
    
    if [ ! -f "$test_path" ]; then
        echo -e "${YELLOW}⚠️  Test file not found: ${test_file}${NC}"
        continue
    fi
    
    echo -e "${BLUE}🧪 Running ${test_file}...${NC}"
    
    # Run HURL test with variables
    if hurl --variable host="$HOST" \
           --json \
           --output "$result_file" \
           --very-verbose \
           "$test_path" 2>/dev/null; then
        echo -e "${GREEN}✅ ${test_file} passed${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}❌ ${test_file} failed${NC}"
        FAILED=$((FAILED + 1))
        
        # Show detailed error if available
        if [ -f "$result_file" ]; then
            echo -e "${YELLOW}📝 Error details:${NC}"
            cat "$result_file" | jq '.entries[-1].response.status // "No response"' 2>/dev/null || echo "Unable to parse error details"
        fi
    fi
    echo ""
done

# Summary
echo -e "${BLUE}📊 Test Summary${NC}"
echo -e "${BLUE}===============${NC}"
echo -e "Total Tests: ${TOTAL}"
echo -e "${GREEN}Passed: ${PASSED}${NC}"
echo -e "${RED}Failed: ${FAILED}${NC}"

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}🎉 All tests passed!${NC}"
    exit 0
else
    echo -e "${RED}❌ ${FAILED} test(s) failed${NC}"
    echo -e "${YELLOW}💡 Check individual result files in ${RESULTS_DIR}/ for details${NC}"
    exit 1
fi